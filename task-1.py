# –ó–∞–≤–¥–∞–Ω–Ω—è 1

# –ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É –Ω–∞ Python, —è–∫–∞ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∫–æ–ø—ñ—é—î —Ñ–∞–π–ª–∏ —É –≤–∏—Ö—ñ–¥–Ω—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó, –ø–µ—Ä–µ–º—ñ—â–∞—î —ó—Ö –¥–æ –Ω–æ–≤–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó 
# —Ç–∞ —Å–æ—Ä—Ç—É—î –≤ –ø—ñ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó, –Ω–∞–∑–≤–∏ —è–∫–∏—Ö –±–∞–∑—É—é—Ç—å—Å—è –Ω–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—ñ —Ñ–∞–π–ª—ñ–≤.

# –¢–∞–∫–æ–∂ –≤—ñ–∑—å–º—ñ—Ç—å –¥–æ —É–≤–∞–≥–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ —É–º–æ–≤–∏:

# 1. –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤. –°–∫—Ä–∏–ø—Ç –º–∞—î –ø—Ä–∏–π–º–∞—Ç–∏ –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞: —à–ª—è—Ö –¥–æ –≤–∏—Ö—ñ–¥–Ω–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó 
# —Ç–∞ —à–ª—è—Ö –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º, —è–∫—â–æ —Ç–µ–∫–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –±—É–ª–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞, –≤–æ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –∑ –Ω–∞–∑–≤–æ—é dist).

# 2. –†–µ–∫—É—Ä—Å–∏–≤–Ω–µ —á–∏—Ç–∞–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π:

# –ú–∞—î –±—É—Ç–∏ –Ω–∞–ø–∏—Å–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –ø—Ä–∏–π–º–∞—î —à–ª—è—Ö –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç.
# –§—É–Ω–∫—Ü—ñ—è –º–∞—î –ø–µ—Ä–µ–±–∏—Ä–∞—Ç–∏ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ —É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó.
# –Ø–∫—â–æ –µ–ª–µ–º–µ–Ω—Ç —î –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—î—é, —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Å–∞–º—É —Å–µ–±–µ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–ª—è —Ü—ñ—î—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó.
# –Ø–∫—â–æ –µ–ª–µ–º–µ–Ω—Ç —î —Ñ–∞–π–ª–æ–º, –≤—ñ–Ω –º–∞—î –±—É—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–º –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è.

# 3. –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤:

# –î–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É —Ñ–∞–π–ª—ñ–≤ –º–∞—î –±—É—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –Ω–æ–≤–∏–π —à–ª—è—Ö —É –≤–∏—Ö—ñ–¥–Ω—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É –¥–ª—è –Ω–∞–∑–≤–∏ –ø—ñ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó.
# –§–∞–π–ª –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º —Ç–∏–ø–æ–º –º–∞—î –±—É—Ç–∏ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–∏–π —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –ø—ñ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é.

# 4. –û–±—Ä–æ–±–∫–∞ –≤–∏–Ω—è—Ç–∫—ñ–≤. –ö–æ–¥ –º–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–æ–±–ª—è—Ç–∏ –≤–∏–Ω—è—Ç–∫–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–æ–º–∏–ª–∫–∏ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ñ–∞–π–ª—ñ–≤ –∞–±–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π.

from pathlib import Path
import shutil
import argparse
import os


def copy_files(source, destination):
    if not destination.exists():
        print("Destination folder was created in the current directory")
        destination.mkdir()

    for current_path in source.iterdir():
        if current_path.is_dir():
            copy_files(current_path, destination)
        else:
            has_access = check_access(current_path)
            is_new_folder_path = create_folder_by_extension(current_path, destination)
            if has_access and is_new_folder_path:
                copy_path = check_dublicates(current_path, is_new_folder_path)

                shutil.copy(current_path, copy_path)


def create_folder_by_extension(file_path, destination_folder):
    file_extension = file_path.suffix.lower()

    if file_extension:
        folder_path = destination_folder.joinpath(file_extension[1:])

        if not folder_path.exists():
            folder_path.mkdir()

        return folder_path

    return None


def check_access(file_path):
    try:
        # Check access to read / write / execite current file
        os.access(file_path, os.R_OK | os.W_OK | os.X_OK)
        return True

    except Exception as e:
        print(f"No access rights: {e}")
        return False


def check_dublicates(file_path, destination_folder):
    file_name = file_path.stem
    file_extension = file_path.suffix

    copy_path = destination_folder / f"{file_name}{file_extension}"

    index = 1
    while copy_path.exists():
        unique_name = f"{file_name}_copy_{index}"
        copy_path = destination_folder / f"{unique_name}{file_extension}"
        index += 1

    return copy_path


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Copying files")

    parser.add_argument(
        "--source",
        default=Path.cwd(),
        type=Path,
        help="The path to the source directory",
        required=False,
    )
    parser.add_argument(
        "--destination",
        default=Path("./dist"),
        type=Path,
        help="The path to the destination directory",
        required=False,
    )

    args = parser.parse_args()

    copy_files(args.source, args.destination)
    print("Copying is complete üéâ")
    